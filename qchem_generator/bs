# 1 "linalg.c"
#pragma GCC set_debug_pwd "/Users/rmuller/Python/PyQuante/qchem_generator"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "linalg.c"

# 18 "linalg.c"

# 1 "/usr/include/math.h" 1 3 4

# 22 "/usr/include/math.h" 3 4




# 1 "/usr/include/architecture/ppc/math.h" 1 3 4

# 22 "/usr/include/architecture/ppc/math.h" 3 4
 










# 1 "/usr/include/sys/cdefs.h" 1 3 4

# 22 "/usr/include/sys/cdefs.h" 3 4


# 60 "/usr/include/sys/cdefs.h" 3 4













# 99 "/usr/include/sys/cdefs.h" 3 4









# 116 "/usr/include/sys/cdefs.h" 3 4








# 134 "/usr/include/sys/cdefs.h" 3 4
# 149 "/usr/include/sys/cdefs.h" 3 4



# 160 "/usr/include/sys/cdefs.h" 3 4
















# 184 "/usr/include/sys/cdefs.h" 3 4
# 192 "/usr/include/sys/cdefs.h" 3 4




















# 229 "/usr/include/sys/cdefs.h" 3 4


# 242 "/usr/include/sys/cdefs.h" 3 4









# 268 "/usr/include/sys/cdefs.h" 3 4














# 291 "/usr/include/sys/cdefs.h" 3 4

























# 337 "/usr/include/sys/cdefs.h" 3 4

























# 34 "/usr/include/architecture/ppc/math.h" 2 3 4































	typedef float float_t;
	typedef double double_t;
# 76 "/usr/include/architecture/ppc/math.h" 3 4

















enum {
	_FP_NAN          = 1,                   
	_FP_INFINITE     = 2,                   
	_FP_ZERO         = 3,                   
	_FP_NORMAL       = 4,                   
	_FP_SUBNORMAL    = 5,					
	_FP_SUPERNORMAL  = 6                    
};






















extern unsigned int __math_errhandling ( void );


# 137 "/usr/include/architecture/ppc/math.h" 3 4

# 180 "/usr/include/architecture/ppc/math.h" 3 4















							  

                              
extern int  __fpclassifyd( double );
extern int  __fpclassifyf( float );

extern int  __isnormald( double );
extern int  __isnormalf( float );

extern int  __isfinited( double );
extern int  __isfinitef( float );

extern int  __isinfd( double );
extern int  __isinff( float );

extern int  __isnand( double );
extern int  __isnanf( float );

extern int  __signbitd( double );
extern int  __signbitf( float );








extern double acos( double );
extern float acosf( float );

extern double asin( double );
extern float asinf( float );

extern double atan( double );
extern float atanf( float );

extern double atan2( double, double );
extern float atan2f( float, float );

extern double cos( double );
extern float cosf( float );

extern double sin( double );
extern float sinf( float );

extern double tan( double );
extern float tanf( float );

extern double acosh( double );
extern float acoshf( float );

extern double asinh( double );
extern float asinhf( float );

extern double atanh( double );
extern float atanhf( float );

extern double cosh( double );
extern float coshf( float );

extern double sinh( double );
extern float sinhf( float );

extern double tanh( double );
extern float tanhf( float );

extern double exp( double );
extern float expf( float );

extern double exp2( double );
extern float exp2f( float );

extern double expm1( double );
extern float expm1f( float );

extern double log( double );
extern float logf( float );

extern double log10( double );
extern float log10f( float );

extern double log2( double );
extern float log2f( float );

extern double log1p( double );
extern float log1pf( float );

extern double logb( double );
extern float logbf( float );

extern double modf( double, double * );
extern float modff( float, float * );

extern double ldexp( double, int );
extern float ldexpf( float, int );

extern double frexp( double, int * );
extern float frexpf( float, int * );

extern int ilogb( double );
extern int ilogbf( float );

extern double scalbn( double, int );
extern float scalbnf( float, int );

extern double scalbln( double, long int );
extern float scalblnf( float, long int );

extern double fabs( double );
extern float fabsf( float );

extern double cbrt( double );
extern float cbrtf( float );

extern double hypot( double, double );
extern float hypotf( float, float );

extern double pow( double, double );
extern float powf( float, float );

extern double sqrt( double );
extern float sqrtf( float );

extern double erf( double );
extern float erff( float );

extern double erfc( double );
extern float erfcf( float );

extern double lgamma( double );
extern float lgammaf( float );

extern double tgamma( double );
extern float tgammaf( float );

extern double ceil( double );
extern float ceilf( float );

extern double floor( double );
extern float floorf( float );

extern double nearbyint( double );
extern float nearbyintf( float );

extern double rint( double );
extern float rintf( float );

extern long int lrint( double );
extern long int lrintf( float );

extern long long int llrint( double );
extern long long int llrintf( float );

extern double round( double );
extern float roundf( float );

extern long int lround( double );
extern long int lroundf( float );

extern long long int llround( double );
extern long long int llroundf( float );

extern double trunc( double );
extern float truncf( float );

extern double fmod( double, double );
extern float fmodf( float, float );

extern double remainder( double, double );
extern float remainderf( float, float );

extern double remquo( double, double, int * );
extern float remquof( float, float, int * );

extern double copysign( double, double );
extern float copysignf( float, float );

extern double nan( __const char * );
extern float nanf( __const char * );

extern double nextafter( double, double );
extern float nextafterf( float, float );


extern double fdim( double, double );
extern float fdimf( float, float );

extern double fmax( double, double );
extern float fmaxf( float, float );

extern double fmin( double, double );
extern float fminf( float, float );

extern double fma( double, double, double );
extern float fmaf( float, float, float );


extern long double acosl( long double ) ;
extern long double asinl( long double ) ;
extern long double atanl( long double ) ;
extern long double atan2l( long double, long double ) ;
extern long double cosl( long double ) ;
extern long double sinl( long double ) ;
extern long double tanl( long double ) ;
extern long double acoshl( long double ) ;
extern long double asinhl( long double ) ;
extern long double atanhl( long double ) ;
extern long double coshl( long double ) ;
extern long double sinhl( long double ) ;
extern long double tanhl( long double ) ;
extern long double expl( long double ) ;
extern long double exp2l( long double ) ;
extern long double expm1l( long double ) ;
extern long double logl( long double ) ;
extern long double log10l( long double ) ;
extern long double log2l( long double ) ;
extern long double log1pl( long double ) ;
extern long double logbl( long double ) ;
extern long double modfl( long double, long double * ) ;
extern long double ldexpl( long double, int ) ;
extern long double frexpl( long double, int * ) ;
extern int ilogbl( long double ) ;
extern long double scalbnl( long double, int ) ;
extern long double scalblnl( long double, long int ) ;
extern long double fabsl( long double ) ;
extern long double cbrtl( long double ) ;
extern long double hypotl( long double, long double ) ;
extern long double powl( long double, long double ) ;
extern long double sqrtl( long double ) ;
extern long double erfl( long double ) ;
extern long double erfcl( long double ) ;
extern long double lgammal( long double ) ;
extern long double tgammal( long double ) ;
extern long double ceill( long double ) ;
extern long double floorl( long double ) ;
extern long double nearbyintl( long double ) ;
extern long double rintl( long double ) ;
extern long int lrintl( long double ) ;
extern long long int llrintl( long double ) ;
extern long double roundl( long double ) ;
extern long int lroundl( long double ) ;
extern long long int llroundl( long double ) ;
extern long double truncl( long double ) ;
extern long double fmodl( long double, long double) ;
extern long double remainderl( long double, long double ) ;
extern long double remquol( long double, long double, int * ) ;
extern long double copysignl( long double, long double ) ;
extern long double nanl( __const char * ) ;
extern long double nextafterl( long double, long double ) ;
extern double nexttoward( double, long double ) ;
extern float nexttowardf( float, long double ) ;
extern long double nexttowardl( long double, long double ) ;
extern long double fdiml( long double, long double ) ;
extern long double fmaxl( long double, long double ) ;
extern long double fminl( long double, long double ) ;
extern long double fmal( long double, long double, long double ) ;









extern double  __inf( void );
extern float  __inff( void );
extern float  __nan( void ); 


extern double j0 ( double );
extern double j1 ( double );
extern double jn ( int, double );

extern double y0 ( double );
extern double y1 ( double );
extern double yn ( int, double );




extern double scalb ( double, int ); 


# 493 "/usr/include/architecture/ppc/math.h" 3 4


extern int signgam;












extern long int rinttol ( double );

extern long int roundtol ( double );

typedef struct __complex_s {
        double Real;
        double Imag;
} __complex_t;







enum fdversion {_fdlibm_ieee = -1, _fdlibm_svid, _fdlibm_xopen, _fdlibm_posix}; 








 






extern  enum fdversion  _fdlib_version;







struct exception {
	int type;
	char *name;
	double arg1;
	double arg2;
	double retval;
};






















extern int finite ( double );

extern double gamma ( double );




extern int matherr ( struct exception * );





extern double significand ( double );




extern double drem ( double, double );


# 606 "/usr/include/architecture/ppc/math.h" 3 4




# 677 "/usr/include/architecture/ppc/math.h" 3 4







# 27 "/usr/include/math.h" 2 3 4








# 20 "linalg.c" 2
# 1 "/usr/include/stdio.h" 1 3 4

# 23 "/usr/include/stdio.h" 3 4

# 60 "/usr/include/stdio.h" 3 4




# 1 "/usr/include/_types.h" 1 3 4

# 23 "/usr/include/_types.h" 3 4




# 1 "/usr/include/sys/_types.h" 1 3 4

# 22 "/usr/include/sys/_types.h" 3 4





# 1 "/usr/include/machine/_types.h" 1 3 4

# 22 "/usr/include/machine/_types.h" 3 4




# 1 "/usr/include/ppc/_types.h" 1 3 4

# 22 "/usr/include/ppc/_types.h" 3 4









typedef __signed char		__int8_t;



typedef unsigned char		__uint8_t;
typedef	unsigned short		__int16_t;
typedef	unsigned short		__uint16_t;
typedef int			__int32_t;
typedef unsigned int		__uint32_t;
typedef long long		__int64_t;
typedef unsigned long long	__uint64_t;

typedef long			__darwin_intptr_t;
typedef unsigned int		__darwin_natural_t;


# 63 "/usr/include/ppc/_types.h" 3 4

typedef int			__darwin_ct_rune_t;	





typedef union {
	char		__mbstate8[128];
	long long	_mbstateL;			
} __mbstate_t;

typedef __mbstate_t		__darwin_mbstate_t;	


typedef int	__darwin_ptrdiff_t;	





typedef long unsigned int		__darwin_size_t;	





typedef __builtin_va_list	__darwin_va_list;	





typedef int		__darwin_wchar_t;	




typedef __darwin_wchar_t	__darwin_rune_t;	


typedef int		__darwin_wint_t;	




typedef unsigned long		__darwin_clock_t;	
typedef __uint32_t		__darwin_socklen_t;	
typedef long			__darwin_ssize_t;	
typedef long			__darwin_time_t;	



# 27 "/usr/include/machine/_types.h" 2 3 4








# 28 "/usr/include/sys/_types.h" 2 3 4



struct mcontext;
struct mcontext64;





# 59 "/usr/include/sys/_types.h" 3 4

struct __darwin_pthread_handler_rec
{
	void           (*__routine)(void *);	
	void           *__arg;			
	struct __darwin_pthread_handler_rec *__next;
};
struct _opaque_pthread_attr_t { long __sig; char __opaque[36]; };
struct _opaque_pthread_cond_t { long __sig; char __opaque[24]; };
struct _opaque_pthread_condattr_t { long __sig; char __opaque[4]; };
struct _opaque_pthread_mutex_t { long __sig; char __opaque[40]; };
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_once_t { long __sig; char __opaque[4]; };
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[124]; };
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[12]; };
struct _opaque_pthread_t { long __sig; struct __darwin_pthread_handler_rec  *__cleanup_stack; char __opaque[596]; };







# 95 "/usr/include/sys/_types.h" 3 4

typedef	__int64_t	__darwin_blkcnt_t;	
typedef	__int32_t	__darwin_blksize_t;	
typedef __int32_t	__darwin_dev_t;		
typedef unsigned int	__darwin_fsblkcnt_t;	
typedef unsigned int	__darwin_fsfilcnt_t;	
typedef __uint32_t	__darwin_gid_t;		
typedef __uint32_t	__darwin_id_t;		
typedef __uint32_t	__darwin_ino_t;		
typedef __darwin_natural_t __darwin_mach_port_name_t; 
typedef __darwin_mach_port_name_t __darwin_mach_port_t; 

typedef struct mcontext *__darwin_mcontext_t;	
typedef struct mcontext64 *__darwin_mcontext64_t; 



typedef __uint16_t	__darwin_mode_t;	
typedef __int64_t	__darwin_off_t;		
typedef __int32_t	__darwin_pid_t;		
typedef struct _opaque_pthread_attr_t
			__darwin_pthread_attr_t; 
typedef struct _opaque_pthread_cond_t
			__darwin_pthread_cond_t; 
typedef struct _opaque_pthread_condattr_t
			__darwin_pthread_condattr_t; 
typedef unsigned long	__darwin_pthread_key_t;	
typedef struct _opaque_pthread_mutex_t
			__darwin_pthread_mutex_t; 
typedef struct _opaque_pthread_mutexattr_t
			__darwin_pthread_mutexattr_t; 
typedef struct _opaque_pthread_once_t
			__darwin_pthread_once_t; 
typedef struct _opaque_pthread_rwlock_t
			__darwin_pthread_rwlock_t; 
typedef struct _opaque_pthread_rwlockattr_t
			__darwin_pthread_rwlockattr_t; 
typedef struct _opaque_pthread_t
			*__darwin_pthread_t;	
typedef __uint32_t	__darwin_sigset_t;	
typedef __int32_t	__darwin_suseconds_t;	
typedef __uint32_t	__darwin_uid_t;		
typedef __uint32_t	__darwin_useconds_t;	
typedef	unsigned char	__darwin_uuid_t[16];



struct	sigaltstack



{
	void	*ss_sp;			
	__darwin_size_t ss_size;	
	int	ss_flags;		
};

typedef struct sigaltstack __darwin_stack_t;	






struct ucontext



{
	int		uc_onstack;
	__darwin_sigset_t	uc_sigmask;	
	__darwin_stack_t 	uc_stack;	

	struct ucontext	*uc_link;		



	__darwin_size_t	uc_mcsize;		
	__darwin_mcontext_t	uc_mcontext;	
};

typedef struct ucontext __darwin_ucontext_t;	





struct ucontext64 {
	int		uc_onstack;
	__darwin_sigset_t	uc_sigmask;	
	__darwin_stack_t 	uc_stack;	
	struct ucontext64 *uc_link;		
	__darwin_size_t	uc_mcsize;		
	__darwin_mcontext64_t uc_mcontext64;	
};
typedef struct ucontext64 __darwin_ucontext64_t; 




# 28 "/usr/include/_types.h" 2 3 4

typedef	int		__darwin_nl_item;
typedef	int		__darwin_wctrans_t;



typedef	unsigned long	__darwin_wctype_t;

















# 65 "/usr/include/stdio.h" 2 3 4






typedef __darwin_va_list	va_list;




typedef	__darwin_size_t		size_t;







typedef __darwin_off_t		fpos_t;













struct __sbuf {
	unsigned char	*_base;
	int		_size;
};


struct __sFILEX;


# 132 "/usr/include/stdio.h" 3 4
typedef	struct __sFILE {
	unsigned char *_p;	
	int	_r;		
	int	_w;		
	short	_flags;		
	short	_file;		
	struct	__sbuf _bf;	
	int	_lbfsize;	

	
	void	*_cookie;	
	int	(*_close)(void *);
	int	(*_read) (void *, char *, int);
	fpos_t	(*_seek) (void *, fpos_t, int);
	int	(*_write)(void *, __const char *, int);

	
	struct	__sbuf _ub;	
	struct __sFILEX *_extra; 
	int	_ur;		

	
	unsigned char _ubuf[3];	
	unsigned char _nbuf[1];	

	
	struct	__sbuf _lb;	

	
	int	_blksize;	
	fpos_t	_offset;	
} FILE;







extern FILE __sF[];







	
# 192 "/usr/include/stdio.h" 3 4


# 205 "/usr/include/stdio.h" 3 4









				




















# 244 "/usr/include/stdio.h" 3 4





void	 clearerr(FILE *);
int	 fclose(FILE *);
int	 feof(FILE *);
int	 ferror(FILE *);
int	 fflush(FILE *);
int	 fgetc(FILE *);
int	 fgetpos(FILE * , fpos_t *);
char	*fgets(char * , int, FILE *);
FILE	*fopen(__const char * , __const char * );
int	 fprintf(FILE * , __const char * , ...) ;
int	 fputc(int, FILE *);
int	 fputs(__const char * , FILE * );
size_t	 fread(void * , size_t, size_t, FILE * );
FILE	*freopen(__const char * , __const char * ,
	    FILE * ) ;
int	 fscanf(FILE * , __const char * , ...) ;
int	 fseek(FILE *, long, int);
int	 fsetpos(FILE *, __const fpos_t *);
long	 ftell(FILE *);
size_t	 fwrite(__const void * , size_t, size_t, FILE * ) ;
int	 getc(FILE *);
int	 getchar(void);
char	*gets(char *);

extern __const int sys_nerr;		
extern __const char *__const sys_errlist[];

void	 perror(__const char *);
int	 printf(__const char * , ...) ;
int	 putc(int, FILE *);
int	 putchar(int);
int	 puts(__const char *);
int	 remove(__const char *);
int	 rename (__const char *, __const char *);
void	 rewind(FILE *);
int	 scanf(__const char * , ...) ;
void	 setbuf(FILE * , char * );
int	 setvbuf(FILE * , char * , int, size_t);
int	 sprintf(char * , __const char * , ...) ;
int	 sscanf(__const char * , __const char * , ...) ;
FILE	*tmpfile(void);
char	*tmpnam(char *);
int	 ungetc(int, FILE *);
int	 vfprintf(FILE * , __const char * , va_list) ;
int	 vprintf(__const char * , va_list) ;
int	 vsprintf(char * , __const char * , va_list) ;

int	 asprintf(char **, __const char *, ...) ;
int	 vasprintf(char **, __const char *, va_list) ;











char	*ctermid(char *);

char	*ctermid_r(char *);

FILE	*fdopen(int, __const char *);

char	*fgetln(FILE *, size_t *);

int	 fileno(FILE *);
void	 flockfile(FILE *);

__const char 
	*fmtcheck(__const char *, __const char *);
int	 fpurge(FILE *);

int	 fseeko(FILE *, fpos_t, int);
fpos_t	 ftello(FILE *);
int	 ftrylockfile(FILE *);
void	 funlockfile(FILE *);
int	 getc_unlocked(FILE *);
int	 getchar_unlocked(void);

int	 getw(FILE *);

int	 pclose(FILE *);
FILE	*popen(__const char *, __const char *);
int	 putc_unlocked(int, FILE *);
int	 putchar_unlocked(int);

int	 putw(int, FILE *);
void	 setbuffer(FILE *, char *, int);
int	 setlinebuf(FILE *);

int	 snprintf(char * , size_t, __const char * , ...) ;
char	*tempnam(__const char *, __const char *);
int	 vfscanf(FILE * , __const char * , va_list) ;
int	 vscanf(__const char * , va_list) ;
int	 vsnprintf(char * , size_t, __const char * , va_list) ;
int	 vsscanf(__const char * , __const char * , va_list) ;

FILE	*zopen(__const char *, __const char *, int);








FILE	*funopen(__const void *,
		int (*)(void *, char *, int),
		int (*)(void *, __const char *, int),
		fpos_t (*)(void *, fpos_t, int),
		int (*)(void *));










int	__srget(FILE *);
int	__svfscanf(FILE *, __const char *, va_list) ;
int	__swbuf(int, FILE *);



# 391 "/usr/include/stdio.h" 3 4

# 403 "/usr/include/stdio.h" 3 4





























# 21 "linalg.c" 2
# 1 "/usr/include/stdlib.h" 1 3 4

# 23 "/usr/include/stdlib.h" 3 4

# 57 "/usr/include/stdlib.h" 3 4







# 1 "/usr/include/sys/wait.h" 1 3 4

# 22 "/usr/include/sys/wait.h" 3 4


# 57 "/usr/include/sys/wait.h" 3 4
 















typedef enum {
	P_ALL,
	P_PID,
	P_PGID
} idtype_t;






typedef __darwin_pid_t	pid_t;




typedef __darwin_id_t	id_t;




# 110 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/sys/signal.h" 1 3 4

# 22 "/usr/include/sys/signal.h" 3 4


# 62 "/usr/include/sys/signal.h" 3 4





# 1 "/usr/include/sys/appleapiopts.h" 1 3 4

# 22 "/usr/include/sys/appleapiopts.h" 3 4



































# 68 "/usr/include/sys/signal.h" 2 3 4





# 1 "/usr/include/machine/signal.h" 1 3 4

# 22 "/usr/include/machine/signal.h" 3 4





# 1 "/usr/include/ppc/signal.h" 1 3 4

# 22 "/usr/include/ppc/signal.h" 3 4










typedef int sig_atomic_t; 







# 50 "/usr/include/ppc/signal.h" 3 4
typedef enum {
	REGS_SAVED_NONE,		
	REGS_SAVED_CALLER,		


	REGS_SAVED_ALL			
} regs_saved_t;









struct sigcontext32 {
    int		sc_onstack;     
    int		sc_mask;        
    int		sc_ir;			
    int		sc_psw;         
    int		sc_sp;      	
    void	*sc_regs;		
};

struct sigcontext64 {
    int		sc_onstack;     
    int		sc_mask;        
    long long	sc_ir;		
    long long	sc_psw;         
    long long	sc_sp;      	
    void	*sc_regs;	
};





struct sigcontext {
    int		sc_onstack;     
    int		sc_mask;        
    int		sc_ir;			
    int		sc_psw;         
    int		sc_sp;      	
    void	*sc_regs;		
};





# 28 "/usr/include/machine/signal.h" 2 3 4









# 74 "/usr/include/sys/signal.h" 2 3 4

# 103 "/usr/include/sys/signal.h" 3 4













# 127 "/usr/include/sys/signal.h" 3 4












typedef __darwin_mcontext_t		mcontext_t;





typedef __darwin_mcontext64_t		mcontext64_t;










typedef __darwin_pthread_attr_t		pthread_attr_t;




typedef __darwin_sigset_t		sigset_t;









typedef __darwin_ucontext_t		ucontext_t;





typedef __darwin_ucontext64_t		ucontext64_t;





typedef __darwin_uid_t			uid_t;


union sigval {
	
	int	sival_int;
	void	*sival_ptr;
};





struct sigevent {
	int				sigev_notify;				
	int				sigev_signo;				
	union sigval	sigev_value;				
	void			(*sigev_notify_function)(union sigval);	  
	pthread_attr_t	*sigev_notify_attributes;	
};

// LP64todo - should this move?

typedef struct __siginfo {
	int	si_signo;		
	int	si_errno;		
	int	si_code;		
	pid_t	si_pid;			
	uid_t	si_uid;			
	int	si_status;		
	void	*si_addr;		
	union sigval si_value;		
	long	si_band;		
	unsigned long	pad[7];		
} siginfo_t;



# 229 "/usr/include/sys/signal.h" 3 4





# 244 "/usr/include/sys/signal.h" 3 4



# 257 "/usr/include/sys/signal.h" 3 4






















# 287 "/usr/include/sys/signal.h" 3 4










union __sigaction_u {
	void    (*__sa_handler)(int);
	void    (*__sa_sigaction)(int, struct __siginfo *,
		       void *);
};


struct	__sigaction {
	union __sigaction_u __sigaction_u;  
	void    (*sa_tramp)(void *, int, int, siginfo_t *, void *);
	sigset_t sa_mask;		
	int	sa_flags;		
};




struct	sigaction {
	union __sigaction_u __sigaction_u;  
	sigset_t sa_mask;		
	int	sa_flags;		
};







# 335 "/usr/include/sys/signal.h" 3 4




















typedef	void (*sig_t)(int);	








typedef __darwin_stack_t stack_t;












struct	sigvec {
	void	(*sv_handler)(int);	
	int	sv_mask;		
	int	sv_flags;		
};














struct	sigstack {
	char	*ss_sp;			
	int	ss_onstack;		
};



















void	(*signal(int, void (*)(int)))(int);



# 111 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4

# 22 "/usr/include/sys/resource.h" 3 4


# 57 "/usr/include/sys/resource.h" 3 4

















struct timeval {
	__darwin_time_t		tv_sec;		
	__darwin_suseconds_t	tv_usec;	
};












typedef __int64_t	rlim_t;




































# 135 "/usr/include/sys/resource.h" 3 4
struct	rusage {
	struct timeval ru_utime;	
	struct timeval ru_stime;	



	




	long	ru_maxrss;		

	long	ru_ixrss;		
	long	ru_idrss;		
	long	ru_isrss;		
	long	ru_minflt;		
	long	ru_majflt;		
	long	ru_nswap;		
	long	ru_inblock;		
	long	ru_oublock;		
	long	ru_msgsnd;		
	long	ru_msgrcv;		
	long	ru_nsignals;		
	long	ru_nvcsw;		
	long	ru_nivcsw;		


};



// LP64todo - should this move?
















# 194 "/usr/include/sys/resource.h" 3 4













struct rlimit {
	rlim_t	rlim_cur;		
	rlim_t	rlim_max;		
};




int	getpriority(int, id_t);
int	getrlimit(int, struct rlimit *);
int	getrusage(int, struct rusage *);
int	setpriority(int, id_t, int);
int	setrlimit(int, __const struct rlimit *);




# 112 "/usr/include/sys/wait.h" 2 3 4


# 122 "/usr/include/sys/wait.h" 3 4




# 135 "/usr/include/sys/wait.h" 3 4






# 152 "/usr/include/sys/wait.h" 3 4






























# 1 "/usr/include/machine/endian.h" 1 3 4

# 22 "/usr/include/machine/endian.h" 3 4








# 1 "/usr/include/ppc/endian.h" 1 3 4

# 22 "/usr/include/ppc/endian.h" 3 4


# 45 "/usr/include/ppc/endian.h" 3 4

# 79 "/usr/include/ppc/endian.h" 3 4




























# 1 "/usr/include/sys/_endian.h" 1 3 4

# 22 "/usr/include/sys/_endian.h" 3 4


# 45 "/usr/include/sys/_endian.h" 3 4

# 77 "/usr/include/sys/_endian.h" 3 4











# 1 "/usr/include/gcc/darwin/3.3/stdint.h" 1 3 4

# 20 "/usr/include/gcc/darwin/3.3/stdint.h" 3 4




# 1 "/usr/include/machine/types.h" 1 3 4

# 22 "/usr/include/machine/types.h" 3 4








# 1 "/usr/include/ppc/types.h" 1 3 4

# 22 "/usr/include/ppc/types.h" 3 4




# 59 "/usr/include/ppc/types.h" 3 4













typedef	__signed char		int8_t;

typedef	unsigned char		u_int8_t;


typedef	short			int16_t;

typedef	unsigned short		u_int16_t;


typedef	int			int32_t;

typedef	unsigned int		u_int32_t;


typedef	long long		int64_t;

typedef	unsigned long long	u_int64_t;




typedef int32_t			register_t;




typedef __darwin_intptr_t	intptr_t;



typedef unsigned long		uintptr_t;






// LP64todo - typedef mach_vm_address_t	user_addr_t;	 
// LP64todo - typedef mach_vm_size_t		user_size_t;	
typedef u_int64_t	user_addr_t;	
typedef u_int64_t	user_size_t;	
typedef int64_t		user_ssize_t;	
typedef int64_t		user_long_t;
typedef u_int64_t	user_ulong_t;
typedef int64_t		user_time_t;




typedef u_int64_t	syscall_arg_t;








# 31 "/usr/include/machine/types.h" 2 3 4









# 25 "/usr/include/gcc/darwin/3.3/stdint.h" 2 3 4





                                         
                                         
                                         
                                         


typedef u_int8_t              uint8_t;   




typedef u_int16_t            uint16_t;   




typedef u_int32_t            uint32_t;   




typedef u_int64_t            uint64_t;   



typedef int8_t           int_least8_t;
typedef int16_t         int_least16_t;
typedef int32_t         int_least32_t;
typedef int64_t         int_least64_t;
typedef uint8_t         uint_least8_t;
typedef uint16_t       uint_least16_t;
typedef uint32_t       uint_least32_t;
typedef uint64_t       uint_least64_t;



typedef int8_t            int_fast8_t;
typedef int16_t          int_fast16_t;
typedef int32_t          int_fast32_t;
typedef int64_t          int_fast64_t;
typedef uint8_t          uint_fast8_t;
typedef uint16_t        uint_fast16_t;
typedef uint32_t        uint_fast32_t;
typedef uint64_t        uint_fast64_t;



                                        
                                        





typedef long long                intmax_t;




typedef unsigned long long      uintmax_t;

























   

















































                             




































 






















# 89 "/usr/include/sys/_endian.h" 2 3 4
# 1 "/usr/include/libkern/OSByteOrder.h" 1 3 4

# 22 "/usr/include/libkern/OSByteOrder.h" 3 4













# 1 "/usr/include/libkern/ppc/OSByteOrder.h" 1 3 4

# 22 "/usr/include/libkern/ppc/OSByteOrder.h" 3 4














# 44 "/usr/include/libkern/ppc/OSByteOrder.h" 3 4



static __inline__
uint16_t
OSReadSwapInt16(
    __const __volatile void               * base,
    uintptr_t                          offset
)
{
    uint16_t result;
    __asm__ __volatile("lhbrx %0, %1, %2"
                     : "=r" (result)
                     : "b%"  (base), "r" (offset)
                     : "memory");
    return result;
}

static __inline__
uint32_t
OSReadSwapInt32(
    __const __volatile void               * base,
    uintptr_t                          offset
)
{
    uint32_t result;
    __asm__ __volatile("lwbrx %0, %1, %2"
                     : "=r" (result)
                     : "b%"  (base), "r" (offset)
                     : "memory");
    return result;
}

static __inline__
uint64_t
OSReadSwapInt64(
    __const __volatile void               * base,
    uintptr_t                          offset
)
{
    __const __volatile uint64_t * inp;
    union ullc {
        uint64_t     ull;
        uint32_t     ul[2];
    } outv;

    inp = (__const __volatile uint64_t *)base;
    outv.ul[0] = OSReadSwapInt32(inp, offset + 4);
    outv.ul[1] = OSReadSwapInt32(inp, offset);
    return outv.ull;
}



static __inline__
void
OSWriteSwapInt16(
    __volatile void               * base,
    uintptr_t                          offset,
    uint16_t                        data
)
{
    __asm__ __volatile("sthbrx %0, %1, %2"
                     :
                     : "r" (data), "b%" (base), "r" (offset)
                     : "memory");
}

static __inline__
void
OSWriteSwapInt32(
    __volatile void               * base,
    uintptr_t                          offset,
    uint32_t                        data
)
{
    __asm__ __volatile("stwbrx %0, %1, %2"
                     :
                     : "r" (data), "b%" (base), "r" (offset)
                     : "memory" );
}

static __inline__
void
OSWriteSwapInt64(
    __volatile void               * base,
    uintptr_t                          offset,
    uint64_t                        data
)
{
    __volatile uint64_t * outp;
    __volatile union ullc {
        uint64_t     ull;
        uint32_t     ul[2];
    } *inp;

    outp = (__volatile uint64_t *)base;
    inp  = (__volatile union ullc *)&data;
    OSWriteSwapInt32(outp, offset, inp->ul[1]);
    OSWriteSwapInt32(outp, offset + 4, inp->ul[0]);
}



static __inline__
uint16_t
_OSSwapInt16(
    uint16_t                        data
)
{
    uint16_t temp = data;
    return OSReadSwapInt16(&temp, 0);
}

static __inline__
uint32_t
_OSSwapInt32(
    uint32_t                        data
)
{
    uint32_t temp = data;
    return OSReadSwapInt32(&temp, 0);
}

static __inline__
uint64_t
_OSSwapInt64(
    uint64_t                        data
)
{
    uint64_t temp = data;
    return OSReadSwapInt64(&temp, 0);
}



# 36 "/usr/include/libkern/OSByteOrder.h" 2 3 4






enum {
    OSUnknownByteOrder,
    OSLittleEndian,
    OSBigEndian
};

static __inline__
int32_t
OSHostByteOrder(void) {



    return OSBigEndian;



}










# 77 "/usr/include/libkern/OSByteOrder.h" 3 4














# 99 "/usr/include/libkern/OSByteOrder.h" 3 4





static __inline__
uint16_t
OSReadBigInt16(
    __const __volatile void               * base,
    uintptr_t                     offset
)
{
    return *(__volatile uint16_t *)((uintptr_t)base + offset);
}

static __inline__
uint32_t
OSReadBigInt32(
    __const __volatile void               * base,
    uintptr_t                     offset
)
{
    return *(__volatile uint32_t *)((uintptr_t)base + offset);
}

static __inline__
uint64_t
OSReadBigInt64(
    __const __volatile void               * base,
    uintptr_t                     offset
)
{
    return *(__volatile uint64_t *)((uintptr_t)base + offset);
}



static __inline__
void
OSWriteBigInt16(
    __volatile void               * base,
    uintptr_t                     offset,
    uint16_t                      data
)
{
    *(__volatile uint16_t *)((uintptr_t)base + offset) = data;
}

static __inline__
void
OSWriteBigInt32(
    __volatile void               * base,
    uintptr_t                     offset,
    uint32_t                      data
)
{
    *(__volatile uint32_t *)((uintptr_t)base + offset) = data;
}

static __inline__
void
OSWriteBigInt64(
    __volatile void               * base,
    uintptr_t                     offset,
    uint64_t                      data
)
{
    *(__volatile uint64_t *)((uintptr_t)base + offset) = data;
}



static __inline__
uint16_t
OSReadLittleInt16(
    __volatile void               * base,
    uintptr_t                     offset
)
{
    return OSReadSwapInt16(base, offset);
}

static __inline__
uint32_t
OSReadLittleInt32(
    __volatile void               * base,
    uintptr_t                     offset
)
{
    return OSReadSwapInt32(base, offset);
}

static __inline__
uint64_t
OSReadLittleInt64(
    __volatile void               * base,
    uintptr_t                     offset
)
{
    return OSReadSwapInt64(base, offset);
}



static __inline__
void
OSWriteLittleInt16(
    __volatile void               * base,
    uintptr_t                     offset,
    uint16_t                      data
)
{
    OSWriteSwapInt16(base, offset, data);
}

static __inline__
void
OSWriteLittleInt32(
    __volatile void               * base,
    uintptr_t                     offset,
    uint32_t                      data
)
{
    OSWriteSwapInt32(base, offset, data);
}

static __inline__
void
OSWriteLittleInt64(
    __volatile void               * base,
    uintptr_t                     offset,
    uint64_t                      data
)
{
    OSWriteSwapInt64(base, offset, data);
}









static __inline__
uint16_t
OSSwapHostToBigInt16(
    uint16_t                        data
)
{
    return data;
}

static __inline__
uint32_t
OSSwapHostToBigInt32(
    uint32_t                        data
)
{
    return data;
}

static __inline__
uint64_t
OSSwapHostToBigInt64(
    uint64_t                        data
)
{
    return data;
}














    






static __inline__
uint16_t
OSSwapBigToHostInt16(
    uint16_t                        data
)
{
    return data;
}

static __inline__
uint32_t
OSSwapBigToHostInt32(
    uint32_t                        data
)
{
    return data;
}

static __inline__
uint64_t
OSSwapBigToHostInt64(
    uint64_t                        data
)
{
    return data;
}


   










# 563 "/usr/include/libkern/OSByteOrder.h" 3 4




# 90 "/usr/include/sys/_endian.h" 2 3 4
 

uint16_t	ntohs(uint16_t);
uint16_t	htons(uint16_t);
uint32_t	ntohl(uint32_t);
uint32_t	htonl(uint32_t);

















# 108 "/usr/include/ppc/endian.h" 2 3 4




# 31 "/usr/include/machine/endian.h" 2 3 4









# 183 "/usr/include/sys/wait.h" 2 3 4







union wait {
	int	w_status;		
	


	struct {







		unsigned int	w_Filler:16,	
				w_Retcode:8,	
				w_Coredump:1,	
				w_Termsig:7;	

	} w_T;
	




	struct {






		unsigned int	w_Filler:16,	
				w_Stopsig:8,	
				w_Stopval:8;	

	} w_S;
};














pid_t	wait(int *);
pid_t	waitpid(pid_t, int *, int);

int	waitid(idtype_t, id_t, siginfo_t *, int);


pid_t	wait3(int *, int, struct rusage *);
pid_t	wait4(pid_t, int *, int, struct rusage *);




# 65 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/alloca.h" 1 3 4

# 23 "/usr/include/alloca.h" 3 4













void	*alloca(size_t);		












# 67 "/usr/include/stdlib.h" 2 3 4













typedef	__darwin_ct_rune_t	ct_rune_t;




typedef __darwin_rune_t   	rune_t;






typedef	__darwin_wchar_t	wchar_t;



typedef struct {
	int quot;		
	int rem;		
} div_t;

typedef struct {
	long quot;		
	long rem;		
} ldiv_t;


typedef struct {
	long long quot;
	long long rem;
} lldiv_t;






















extern int __mb_cur_max;










void	 abort(void) __attribute__((__noreturn__));
int	 abs(int) __attribute__((__const__));
int	 atexit(void (*)(void));
double	 atof(__const char *);
int	 atoi(__const char *);
long	 atol(__const char *);

long long
	 atoll(__const char *);

void	*bsearch(__const void *, __const void *, size_t,
	    size_t, int (*)(__const void *, __const void *));
void	*calloc(size_t, size_t);
div_t	 div(int, int) __attribute__((__const__));
void	 exit(int) __attribute__((__noreturn__));
void	 free(void *);
char	*getenv(__const char *);
long	 labs(long) __attribute__((__const__));
ldiv_t	 ldiv(long, long) __attribute__((__const__));

long long
	 llabs(long long);
lldiv_t	 lldiv(long long, long long);

void	*malloc(size_t);
int	 mblen(__const char *, size_t);
size_t	 mbstowcs(wchar_t *  , __const char * , size_t);
int	 mbtowc(wchar_t * , __const char * , size_t);
void	 qsort(void *, size_t, size_t,
	    int (*)(__const void *, __const void *));
int	 rand(void);
void	*realloc(void *, size_t);
void	 srand(unsigned);
double	 strtod(__const char *, char **);
float	 strtof(__const char *, char **);
long	 strtol(__const char *, char **, int);
long double
	 strtold(__const char *, char **) ;

long long 
	 strtoll(__const char *, char **, int);

unsigned long
	 strtoul(__const char *, char **, int);

unsigned long long
	 strtoull(__const char *, char **, int);

int	 system(__const char *);
size_t	 wcstombs(char * , __const wchar_t * , size_t);
int	 wctomb(char *, wchar_t);


void	_Exit(int) __attribute__((__noreturn__));
long	 a64l(__const char *);
double	 drand48(void);
char	*ecvt(double, int, int *, int *); 
double	 erand48(unsigned short[3]); 
char	*fcvt(double, int, int *, int *); 
char	*gcvt(double, int, char *); 
int	 getsubopt(char **, char * __const *, char **);
int	 grantpt(int);



char	*initstate(unsigned long, char *, long);

long	 jrand48(unsigned short[3]);
char	*l64a(long);
void	 lcong48(unsigned short[7]);
long	 lrand48(void);
char	*mktemp(char *);
int	 mkstemp(char *);
long	 mrand48(void); 
long	 nrand48(unsigned short[3]);
int	 posix_openpt(int);
char	*ptsname(int);
int	 putenv(char *) ;
long	 random(void);
char	*realpath(__const char *, char *resolved_path);
unsigned short
	*seed48(unsigned short[3]);
int	 setenv(__const char *, __const char *, int) ;



int	 setkey(__const char *);

char	*setstate(__const char *);
void	 srand48(long);



void	 srandom(unsigned long);

int	 unlockpt(int);



void	 unsetenv(__const char *);







typedef	__darwin_dev_t	dev_t;




typedef	__darwin_mode_t	mode_t;



u_int32_t
	 arc4random(void);
void	 arc4random_addrandom(unsigned char *dat, int datlen);
void	 arc4random_stir(void);

	 
char	*cgetcap(char *, __const char *, int);
int	 cgetclose(void);
int	 cgetent(char **, char **, __const char *);
int	 cgetfirst(char **, char **);
int	 cgetmatch(__const char *, __const char *);
int	 cgetnext(char **, char **);
int	 cgetnum(char *, __const char *, long *);
int	 cgetset(__const char *);
int	 cgetstr(char *, __const char *, char **);
int	 cgetustr(char *, __const char *, char **);

int	 daemon(int, int);
char	*devname(dev_t, mode_t);
char	*devname_r(dev_t, mode_t, char *buf, int len);
char	*getbsize(int *, long *);
int	 getloadavg(double [], int);
__const char
	*getprogname(void);

int	 heapsort(void *, size_t, size_t,
	    int (*)(__const void *, __const void *));
int	 mergesort(void *, size_t, size_t,
	    int (*)(__const void *, __const void *));
void	 qsort_r(void *, size_t, size_t, void *,
	    int (*)(void *, __const void *, __const void *));
int	 radixsort(__const unsigned char **, int, __const unsigned char *,
	    unsigned);
void	 setprogname(__const char *);
int	 sradixsort(__const unsigned char **, int, __const unsigned char *,
	    unsigned);
void	 sranddev(void);
void	 srandomdev(void);
int	 rand_r(unsigned *);
void	*reallocf(void *, size_t);

long long
	 strtoq(__const char *, char **, int);
unsigned long long
	 strtouq(__const char *, char **, int);

extern char *suboptarg;		
void	*valloc(size_t);









# 22 "linalg.c" 2

void copy(int N, double *A, int Astride, double *B, int Bstride){
  






  int i;
  for (i=0; i<N; i++) B[i*Bstride] = A[i*Astride];
}

double dot(int N, double *A, int Astride, double *B, int Bstride){
  






  int i;
  double val=0;
  for (i=0; i<N; i++) val += A[i*Astride]*B[i*Bstride];
  return val;
}

void matmult(int N, int M, int L, double *A, double *B, double *C){
  




  int i,j;
  for (i=0; i<N; i++){
    for (j=0; j<M; j++)
      C[i+j*N] = dot(L,&A[i],N,&B[j*L],1);
  }
}

void matmult_tn(int N, int M, int L, double *A, double *B, double *C){
  




  int i,j;
  for (i=0; i<N; i++){
    for (j=0; j<M; j++){
      C[i+j*N] = dot(L,&A[i*L],1,&B[j*L],1);
    }
  }
}



void printmat(int N, int M, double *A, char *title){
  
  int i,j;
  printf("%s\n",title);
  for (i=0; i<N; i++){
    for (j=0; j<M; j++)
      printf("%8.2f ",A[i+j*N]);
    printf("\n");
  }
}

void zero(int N, double *A){
  
  int i;
  for (i=0; i<N; i++) A[i] = 0.;
}

void eye(int N, double *A){
  
  int i;
  zero(N*N,A);
  for (i=0; i<N; i++) A[i+i*N] = 1.;
}

int index(i,j,N){
  




  //return (i-1)+(j-1)*N;
  return (j-1)+(i-1)*N;  
}

void transpose(int n, double *a){
  int i,j;
  double tmp;
  for (i=0; i<n; i++){
    for (j=0; j<=i; j++){
      tmp = a[i+j*n];
      a[i+j*n] = a[j+i*n];
      a[j+i*n] = tmp;
    }
  }
}

void evsort(int n, double *d, double *v){
  



  int max_sweeps,isweep,nswap,i,j;
  double tmp;

  if (n > 30)
    max_sweeps = n;
  else
    max_sweeps = 30;

  for (isweep=0; isweep<max_sweeps; isweep++){
    nswap = 0;
    for (i=0; i<n-1; i++){
      if (d[i]>d[i+1]){
	nswap++;
	tmp = d[i];
	d[i] = d[i+1];
	d[i+1] = tmp;
	for (j=0; j<n; j++){
	  tmp = v[j+i*n];
	  v[j+i*n] = v[j+(i+1)*n];
	  v[j+(i+1)*n] = tmp;
	}
      }
    }
    if (nswap == 0) break;
  }
  if (isweep == max_sweeps-1) printf("Warning: max_sweeps exceeded in evsort\n");
  return;
}


//replace with Mark's code when it's ready


int jacobi(double *a, int n, double d[], double *v, double *b, double *z){
  int j,iq,ip,i,nrot=0;
  double tresh,theta,tau,t,sm,s,h,g,c;

  eye(n,v);
  for (ip=1;ip<=n;ip++) {
    b[ip-1]=d[ip-1]=a[ip-1+(ip-1)*n];
    z[ip-1]=0.0;
  }
  for (i=1;i<=50;i++) {
    sm=0.0;
    for (ip=1;ip<=n-1;ip++) {
      for (iq=ip+1;iq<=n;iq++)
	sm += fabs(a[iq-1+(ip-1)*n]);
    }
    if (sm == 0.0) {
      transpose(n,v);
      evsort(n,d,v);
      return nrot;
    }
    if (i < 4)
      tresh=0.2*sm/(n*n);
    else
      tresh=0.0;
    for (ip=1;ip<=n-1;ip++) {
      for (iq=ip+1;iq<=n;iq++) {
	g=100.0*fabs(a[iq-1+(ip-1)*n]);
	if (i > 4 && (fabs(d[ip-1])+g) == fabs(d[ip-1])
	    && (fabs(d[iq-1])+g) == fabs(d[iq-1]))
	  a[iq-1+(ip-1)*n]=0.0;
	else if (fabs(a[iq-1+(ip-1)*n]) > tresh) {
	  h=d[iq-1]-d[ip-1];
	  if ((fabs(h)+g) == fabs(h))
	    t=(a[iq-1+(ip-1)*n])/h;
	  else {
	    theta=0.5*h/(a[iq-1+(ip-1)*n]);
	    t=1.0/(fabs(theta)+sqrt(1.0+theta*theta));
	    if (theta < 0.0) t = -t;
	  }
	  c=1.0/sqrt(1+t*t);
	  s=t*c;
	  tau=s/(1.0+c);
	  h=t*a[iq-1+(ip-1)*n];
	  z[ip-1] -= h;
	  z[iq-1] += h;
	  d[ip-1] -= h;
	  d[iq-1] += h;
	  a[iq-1+(ip-1)*n]=0.0;
	  for (j=1;j<=ip-1;j++) {
	    g=a[ip-1+(j-1)*n];h=a[iq-1+(j-1)*n];a[ip-1+(j-1)*n]=g-s*(h+g*tau); a[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=ip+1;j<=iq-1;j++) {
	    g=a[j-1+(ip-1)*n];h=a[iq-1+(j-1)*n];a[j-1+(ip-1)*n]=g-s*(h+g*tau); a[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=iq+1;j<=n;j++) {
	    g=a[j-1+(ip-1)*n];h=a[j-1+(iq-1)*n];a[j-1+(ip-1)*n]=g-s*(h+g*tau); a[j-1+(iq-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=1;j<=n;j++) {
	    g=v[ip-1+(j-1)*n];h=v[iq-1+(j-1)*n];v[ip-1+(j-1)*n]=g-s*(h+g*tau); v[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  nrot++;
	}
      }
    }
    for (ip=1;ip<=n;ip++) {
      b[ip-1] += z[ip-1];
      d[ip-1]=b[ip-1];
      z[ip-1]=0.0;
    }
  }
  printf("Too many iterations in routine jacobi");
  exit(1);
}
int jacobi_older(double *a, int n, double d[], double *v, double *b, double *z){
  int j,iq,ip,i,nrot=0;
  double tresh,theta,tau,t,sm,s,h,g,c;

  eye(n,v);
  for (ip=1;ip<=n;ip++) {
    b[ip-1]=d[ip-1]=a[ip-1+(ip-1)*n];
    z[ip-1]=0.0;
  }
  for (i=1;i<=50;i++) {
    sm=0.0;
    for (ip=1;ip<=n-1;ip++) {
      for (iq=ip+1;iq<=n;iq++)
	sm += fabs(a[iq-1+(ip-1)*n]);
    }
    if (sm == 0.0) {
      transpose(n,v);
      evsort(n,d,v);
      return nrot;
    }
    if (i < 4)
      tresh=0.2*sm/(n*n);
    else
      tresh=0.0;
    for (ip=1;ip<=n-1;ip++) {
      for (iq=ip+1;iq<=n;iq++) {
	g=100.0*fabs(a[iq-1+(ip-1)*n]);
	if (i > 4 && (fabs(d[ip-1])+g) == fabs(d[ip-1])
	    && (fabs(d[iq-1])+g) == fabs(d[iq-1]))
	  a[iq-1+(ip-1)*n]=0.0;
	else if (fabs(a[iq-1+(ip-1)*n]) > tresh) {
	  h=d[iq-1]-d[ip-1];
	  if ((fabs(h)+g) == fabs(h))
	    t=(a[iq-1+(ip-1)*n])/h;
	  else {
	    theta=0.5*h/(a[iq-1+(ip-1)*n]);
	    t=1.0/(fabs(theta)+sqrt(1.0+theta*theta));
	    if (theta < 0.0) t = -t;
	  }
	  c=1.0/sqrt(1+t*t);
	  s=t*c;
	  tau=s/(1.0+c);
	  h=t*a[iq-1+(ip-1)*n];
	  z[ip-1] -= h;
	  z[iq-1] += h;
	  d[ip-1] -= h;
	  d[iq-1] += h;
	  a[iq-1+(ip-1)*n]=0.0;
	  for (j=1;j<=ip-1;j++) {
	    g=a[ip-1+(j-1)*n];h=a[iq-1+(j-1)*n];a[ip-1+(j-1)*n]=g-s*(h+g*tau); a[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=ip+1;j<=iq-1;j++) {
	    g=a[j-1+(ip-1)*n];h=a[iq-1+(j-1)*n];a[j-1+(ip-1)*n]=g-s*(h+g*tau); a[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=iq+1;j<=n;j++) {
	    g=a[j-1+(ip-1)*n];h=a[j-1+(iq-1)*n];a[j-1+(ip-1)*n]=g-s*(h+g*tau); a[j-1+(iq-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=1;j<=n;j++) {
	    g=v[ip-1+(j-1)*n];h=v[iq-1+(j-1)*n];v[ip-1+(j-1)*n]=g-s*(h+g*tau); v[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  nrot++;
	}
      }
    }
    for (ip=1;ip<=n;ip++) {
      b[ip-1] += z[ip-1];
      d[ip-1]=b[ip-1];
      z[ip-1]=0.0;
    }
  }
  printf("Too many iterations in routine jacobi");
  exit(1);
}
int jacobi_oldest(double *a, int n, double d[], double *v, double *b, double *z){
  int j,iq,ip,i,nrot=0;
  double tresh,theta,tau,t,sm,s,h,g,c;

  eye(n,v);
  for (ip=1;ip<=n;ip++) {
    b[ip-1]=d[ip-1]=a[index(ip,ip,n)];
    z[ip-1]=0.0;
  }
  for (i=1;i<=50;i++) {
    sm=0.0;
    for (ip=1;ip<=n-1;ip++) {
      for (iq=ip+1;iq<=n;iq++)
	sm += fabs(a[index(ip,iq,n)]);
    }
    if (sm == 0.0) {
      transpose(n,v);
      evsort(n,d,v);
      return nrot;
    }
    if (i < 4)
      tresh=0.2*sm/(n*n);
    else
      tresh=0.0;
    for (ip=1;ip<=n-1;ip++) {
      for (iq=ip+1;iq<=n;iq++) {
	g=100.0*fabs(a[index(ip,iq,n)]);
	if (i > 4 && (fabs(d[ip-1])+g) == fabs(d[ip-1])
	    && (fabs(d[iq-1])+g) == fabs(d[iq-1]))
	  a[index(ip,iq,n)]=0.0;
	else if (fabs(a[index(ip,iq,n)]) > tresh) {
	  h=d[iq-1]-d[ip-1];
	  if ((fabs(h)+g) == fabs(h))
	    t=(a[index(ip,iq,n)])/h;
	  else {
	    theta=0.5*h/(a[index(ip,iq,n)]);
	    t=1.0/(fabs(theta)+sqrt(1.0+theta*theta));
	    if (theta < 0.0) t = -t;
	  }
	  c=1.0/sqrt(1+t*t);
	  s=t*c;
	  tau=s/(1.0+c);
	  h=t*a[index(ip,iq,n)];
	  z[ip-1] -= h;
	  z[iq-1] += h;
	  d[ip-1] -= h;
	  d[iq-1] += h;
	  a[index(ip,iq,n)]=0.0;
	  for (j=1;j<=ip-1;j++) {
	    g=a[ip-1+(j-1)*n];h=a[iq-1+(j-1)*n];a[ip-1+(j-1)*n]=g-s*(h+g*tau); a[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=ip+1;j<=iq-1;j++) {
	    g=a[j-1+(ip-1)*n];h=a[iq-1+(j-1)*n];a[j-1+(ip-1)*n]=g-s*(h+g*tau); a[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=iq+1;j<=n;j++) {
	    g=a[j-1+(ip-1)*n];h=a[j-1+(iq-1)*n];a[j-1+(ip-1)*n]=g-s*(h+g*tau); a[j-1+(iq-1)*n]=h+s*(g-h*tau);
	      }
	  for (j=1;j<=n;j++) {
	    g=v[ip-1+(j-1)*n];h=v[iq-1+(j-1)*n];v[ip-1+(j-1)*n]=g-s*(h+g*tau); v[iq-1+(j-1)*n]=h+s*(g-h*tau);
	      }
	  nrot++;
	}
      }
    }
    for (ip=1;ip<=n;ip++) {
      b[ip-1] += z[ip-1];
      d[ip-1]=b[ip-1];
      z[ip-1]=0.0;
    }
  }
  printf("Too many iterations in routine jacobi");
  exit(1);
}



int gjacobi(double *a, double *s, int n, double d[], 
	    double *v, double *b, double *z){
  



  int info,i,j;

  
  info = jacobi(s,n,d,v,b,z);
  
  for (j=0; j<n; j++){
    for (i=0; i<n; i++) s[i+j*n] = v[i+j*n]/sqrt(d[j]);
  }

  
  matmult(n,n,n,a,s,v);
  matmult_tn(n,n,n,s,v,a);

  
  info = jacobi(a,n,d,v,b,z);
  
  copy(n*n,v,1,a,1);
  matmult(n,n,n,s,a,v);
  return info;
}  

