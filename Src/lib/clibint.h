/**
 * @file clibint.h
 * @author Gabriele Lanaro <gabriele.lanaro@gmail.com>
 *
 * This source code is part of the PyQuante Quantum Chemistry suite.
 *  
 * This is the thin wrapper around the libint library and uses the
 * Shell struct in shell.h to compute the electron repulsion
 * integrals.
 *
 * Written by Gabriele Lanaro, 2009-2010
 * Copyright (c) 2009-2010, Gabriele Lanaro
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 */

#ifndef _CLIBINT_H_
#define _CLIBINT_H_

#include "shell.h"
#include <libint.h>

/**
 * Compute the renormalization prefactors relative to each function in
 * the shell.
 *
 * @param output: This is an array of double that has to be
 * initializated before passing it to the function. Its size is
 * shell->nfuncs.
 */
void shell_libint_renorm(Shell *shell, double *output );

/**
 * Compute a shell quartet.
 * 
 * A shell quartet is the set of two-electron integrals generated by
 * combination of ContractedGTOs from the 4 shells.
 * 
 * The output parameter contains the ERIs in row major order, if you
 * want the eri i,j,k,l from the shell quartet a,b,c,d
 *
 * ((i*b.nfuncs + j)*c.nfuncs + k)*d.nfuncs + l
 * 
 * @param output is a previously initializated buffer. You must
 * allocate space for
 * shell1->nfuncs * shell2->nfuncs * shell3->nfuncs * shell4->nfuncs  values.
 */
void shell_compute_eri(Shell *shell1, Shell *shell2, Shell *shell3, Shell *shell4, double *output);

/**
 * Internal use function, needed to feed the libint library.
 */
prim_data compute_primitive_data(PrimitiveGTO *prim1, PrimitiveGTO *prim2, 
				 PrimitiveGTO *prim3, PrimitiveGTO *prim4);

/**
 * Swap the indexes and return the row_major index for the given
 * i,j,k,l quartet.  Helper function.
 *
 * @param swapflag tell us which one you have to swap through flags:
 * ABSWAP, CDSWAP, ABCDSWAP
 */
static const int ABSWAP=1,CDSWAP=2,ABCDSWAP=4;
int swapped_ijkl(int i, int j, int k, int l,
		 int ni, int nj, int nk, int nl,int swapflag);



#endif /* _CLIBINT_H_ */
